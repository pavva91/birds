/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class App {
    public static void main(String[] args) {
        App app = new App();

        if (args.length == 0) {
            System.out.println("insert the function name as first parameter, either 'most' or 'last");
            return;
        }

        List<Integer> birds = new ArrayList<Integer>();
        for (int i = 1; i < args.length; i++) {
            int j = Integer.parseInt(args[i]);
            birds.add(j);
        }

        String functionName = args[0];
        switch (functionName) {
            case "most":
                int most = app.getMostFrequentSighting(birds.stream().mapToInt(i -> i).toArray());
                System.out.println(most);
                break;

            case "last":
                System.out.println("LAST");
                int last = app.getLatestFistSighting(birds.stream().mapToInt(i -> i).toArray());
                System.out.println(last);
                break;

            default:
                System.out.println("insert the function name as first parameter, either 'most' or 'last");
                break;
        }
    }

    public int getMostFrequentSighting(int[] birds) throws IllegalArgumentException {
        Map<Integer, Integer> sightings = new HashMap<>();
        if (birds.length == 0) {
            throw new IllegalArgumentException("insert a non-empty array");
        }

        for (int bird : birds) {
            if (bird < 1) {
                throw new IllegalArgumentException("bird type ids must be >= 1");
            }
            if (sightings.containsKey(bird)) {
                int oldValue = sightings.get(bird);
                sightings.put(bird, oldValue + 1);
            } else {
                sightings.put(bird, 1);
            }
        }

        int maxValue = 0;
        int mostFrequentBird = 0;

        for (Integer key : sightings.keySet()) {
            Integer value = sightings.get(key);
            if (value > maxValue) {
                mostFrequentBird = key;
                maxValue = value;
            } else if (value == maxValue) {
                if (key < mostFrequentBird) {
                    mostFrequentBird = key;
                    maxValue = value;
                }
            }
        }

        return mostFrequentBird;
    }

    public int getLatestFistSighting(int[] birds) throws IllegalArgumentException {
        Map<Integer, Boolean> sightings = new HashMap<>();
        int latestFistSighting = 0;
        if (birds.length == 0) {
            throw new IllegalArgumentException("insert a non-empty array");
        }

        for (int bird : birds) {
            if (bird < 1) {
                throw new IllegalArgumentException("bird type ids must be >= 1");
            }
            if (!sightings.containsKey(bird)) {
                latestFistSighting = bird;
                sightings.put(bird, true);
            }
        }

        return latestFistSighting;
    }
}
